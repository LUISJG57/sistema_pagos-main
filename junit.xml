<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="12" time="1.164" timestamp="2025-10-05T21:54:37.410664-06:00" hostname="MacBook-Air-de-Luis-40.local"><testcase classname="tests.test_app" name="test_health" time="0.009" /><testcase classname="tests.test_app" name="test_config_contains_score_mapping" time="0.002" /><testcase classname="tests.test_app" name="test_transaction_in_review_path" time="0.009" /><testcase classname="tests.test_app" name="test_transaction_hard_block_rejection" time="0.002" /><testcase classname="tests.test_import_engine" name="test_import_engine" time="0.000" /><testcase classname="tests.test_import_engine" name="test_env_overrides_change_thresholds" time="0.001" /><testcase classname="tests.test_import_engine" name="test_is_night_covers_true_and_false" time="0.000" /><testcase classname="tests.test_import_engine" name="test_high_amount_default_and_per_type" time="0.000" /><testcase classname="tests.test_import_engine" name="test_assess_row_hard_block_returns_early" time="0.000" /><testcase classname="tests.test_import_engine" name="test_assess_row_all_signals_paths_and_frequency_buffer" time="0.002"><failure message="AssertionError: assert 'REJECTED' == 'IN_REVIEW'&#10;  &#10;  - IN_REVIEW&#10;  + REJECTED">def test_assess_row_all_signals_paths_and_frequency_buffer():
        mod = importlib.import_module(MODULE_NAME)
    
        # Caso que debe quedar en IN_REVIEW (&gt;= review_at y &lt; reject_at)
        row_review = pd.Series({
            "ip_risk": "medium",                     # +2
            "email_risk": "new_domain",              # +2
            "device_fingerprint_risk": "low",        # +0
            "user_reputation": "new",                # +0
            "hour": 23,                              # night +1
            "bin_country": "MX", "ip_country": "US", # geo mismatch +2
            "amount_mxn": 2500.0, "product_type": "digital",  # high_amount +2
            "latency_ms": 1200,                      # no extreme
            "customer_txn_30d": 0,
        })
        res_review = mod.assess_row(row_review, mod.DEFAULT_CONFIG)
&gt;       assert res_review["decision"] == mod.DECISION_IN_REVIEW
E       AssertionError: assert 'REJECTED' == 'IN_REVIEW'
E         
E         - IN_REVIEW
E         + REJECTED

tests/test_import_engine.py:81: AssertionError</failure></testcase><testcase classname="tests.test_import_engine" name="test_run_writes_output_and_returns_df" time="0.004"><failure message="ValueError: dict contains fields not in fieldnames: 'hour', 'email_risk', 'bin_country', 'customer_txn_30d', 'ip_country', 'user_reputation', 'device_fingerprint_risk', 'latency_ms'">tmp_path = PosixPath('/private/var/folders/mt/qnb3yx5n1w9891c4qncdw6r00000gn/T/pytest-of-luisgarcia/pytest-1/test_run_writes_output_and_ret0')

    def test_run_writes_output_and_returns_df(tmp_path):
        mod = importlib.import_module(MODULE_NAME)
    
        # Creamos CSV de entrada con 2 filas que cubran caminos distintos
        input_path = tmp_path / "in.csv"
        output_path = tmp_path / "out.csv"
    
        rows = [
            {
                "chargeback_count": 3, "ip_risk": "high",  # hard block
                "amount_mxn": 0, "product_type": "digital"
            },
            {
                "chargeback_count": 0, "ip_risk": "low",
                "email_risk": "medium",
                "device_fingerprint_risk": "low",
                "user_reputation": "new",
                "hour": 23, "bin_country": "MX", "ip_country": "US",
                "amount_mxn": 2600, "product_type": "digital",
                "latency_ms": 0, "customer_txn_30d": 0
            },
        ]
        with input_path.open("w", newline="") as f:
            writer = csv.DictWriter(f, fieldnames=rows[0].keys())
            writer.writeheader()
&gt;           writer.writerows(rows)

tests/test_import_engine.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/csv.py:157: in writerows
    return self.writer.writerows(map(self._dict_to_list, rowdicts))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;csv.DictWriter object at 0x10cdeab50&gt;
rowdict = {'amount_mxn': 2600, 'bin_country': 'MX', 'chargeback_count': 0, 'customer_txn_30d': 0, ...}

    def _dict_to_list(self, rowdict):
        if self.extrasaction == "raise":
            wrong_fields = rowdict.keys() - self.fieldnames
            if wrong_fields:
&gt;               raise ValueError("dict contains fields not in fieldnames: "
                                 + ", ".join([repr(x) for x in wrong_fields]))
E               ValueError: dict contains fields not in fieldnames: 'hour', 'email_risk', 'bin_country', 'customer_txn_30d', 'ip_country', 'user_reputation', 'device_fingerprint_risk', 'latency_ms'

/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/csv.py:149: ValueError</failure></testcase><testcase classname="tests.test_import_engine" name="test_main_cli_executes_and_prints_head" time="0.010" /></testsuite></testsuites>