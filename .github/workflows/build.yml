name: Build

on:
  push:
    branches:
      - main


jobs:
  tests:
    runs-on: ubuntu-latest
    name: Run tests and upload reports
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Run tests and produce reports
        run: |
          pytest --junitxml=junit.xml --cov=. --cov-report=xml:coverage.xml -q

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            coverage.xml
            junit.xml

  sonar-scan:
    runs-on: ubuntu-latest
    needs: tests
    name: SonarScanner
    steps:
      - uses: actions/checkout@v4

      - name: Download test reports
        uses: actions/download-artifact@v4
        with:
          name: test-reports
          path: .

      - name: Run SonarScanner (docker) with retries
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          set -euo pipefail
          max_attempts=3
          attempt=1
          until [ $attempt -gt $max_attempts ]
          do
            echo "Sonar attempt $attempt/$max_attempts"
            echo "Listing files in workspace before scanner:"
            ls -la
            echo "Contents of root (for diagnostics):"
            find . -maxdepth 2 -type f -print

            docker run --rm \
              -e SONAR_HOST_URL="${SONAR_HOST_URL}" \
              -e SONAR_TOKEN="${SONAR_TOKEN}" \
              -v "$PWD":"/usr/src" \
              sonarsource/sonar-scanner-cli:latest \
                -Dsonar.projectBaseDir=/usr/src \
                -Dsonar.python.coverage.reportPaths=/usr/src/coverage.xml \
                -Dsonar.python.xunit.reportPath=/usr/src/junit.xml \
                -Dsonar.projectKey=${{ github.repository }} || true

            exit_code=$?
            if [ $exit_code -eq 0 ]; then
              echo "Sonar succeeded"
              break
            fi

            echo "Sonar failed with exit code $exit_code"
            attempt=$((attempt+1))
            if [ $attempt -le $max_attempts ]; then
              sleep_time=$((attempt * 10))
              echo "Sleeping $sleep_time seconds before retry..."
              sleep $sleep_time
            else
              echo "All sonar attempts failed"
              exit $exit_code
            fi
          done